;(function() {
    var app = this;

    app.observers = {};

    app.noop = function() {
        return '';
    };

    app.triggeredEvents = [];

    app.trigger = function _trigger(eventType, eventOptions, context) {
        setTimeout(function() {
            var observers = app.observers[eventType];
            var i;

            if (observers) {
                i = observers.length;

                while (i--) {
                    if (typeof observers[i] === 'function') {
                        observers[i].call(context, eventOptions);
                    }
                }
            }
        }, 0);

        return app;
    };

    app.subscribe = function _subscribe(eventType, callback) {
        var observers = app.observers;

        if (!(eventType in observers)) {
            observers[eventType] = [];
        }

        observers[eventType].push(callback);

        return app;
    };

    app.unsubscribe = function _unsubscribe(eventType, handler) {
        var observers = app.observers[eventType];
        var i;

        if (observers && observers.length) {
            i = observers.length;

            while (i--) {
                if (!handler || observers[i] === handler) {
                    observers.splice(i, 1);
                }
            }
        }

        return app;
    };

}).call(window.VGN = window.VGN || {});

'use strict';

(function() {
    var app = this;
    var instance;

    var Game = function _Game(config) {
        var config = config || {};

        this.config = {
            canvasWidth: config.canvasWidth,
            canvasHeight: config.canvasHeight,
            stepDelay: 100,
            appearDelay: 500,
            checkDelay: 500,
            scoreId: 'score',
            gameOverClass: 'gameOver'
        };

        if(instance !== undefined) {
            return instance;
        }

        instance = this;

        this.gameOver = false;

        this.initialize();
    };

    Game.prototype.initialize = function _initialize() {
        this.food = [];
        this.time = 0;

        this.player = new app.Player({
            canvasWidth: this.config.canvasWidth,
            canvasHeight: this.config.canvasHeight
        });

        this.startCreatingOfFood();

        this.startTimer();
        this.bindKeyboard();
        this.bindEvents();
        this.scoreEl = document.getElementById(this.config.scoreId);
        return this;
    };

    Game.prototype.getCanvasSize = function _getCanvasSize() {
      return {width: this.config.canvasWidth, height: this.config.canvasHeight};
    };

    Game.prototype.bindEvents = function _bindEvents() {
        var _this = this;
        app.subscribe('gameOver', function() {
            _this.stopGame();
        });
    };

    Game.prototype.bindKeyboard = function _bindKeyboard() {
        var _this = this;

        document.body.addEventListener('keydown', function(event) {
            if(_this.gameOver) {
                return;
            }

            switch (event.keyCode) {
                case 37:
                    app.trigger('go:left'); event.preventDefault(); break;
                case 38:
                    app.trigger('go:up'); event.preventDefault(); break;
                case 39:
                    app.trigger('go:right'); event.preventDefault(); break;
                case 40:
                    app.trigger('go:down'); event.preventDefault(); break;
            }
        });
    };

    Game.prototype.startTimer = function _startTimer() {
        var _this = this;

        _this.timer = setInterval(function() {
            var playerPos = _this.player.getPosition();

            _this.food.forEach(function(meal) {
                if(!meal.alive) {
                    return false;
                }

                var mealPos = meal.getPosition();

                if(mealPos.x === playerPos.x && mealPos.y === playerPos.y) {
                    meal.alive = false;

                    if(meal.getType() === 'vegetable') {
                        app.trigger('eat');
                    } else {
                        app.trigger('gameOver');
                    }
                }

                _this.scoreEl.innerHTML = _this.player.score;
            });
        }, _this.checkDelay);
    };

    Game.prototype.startCreatingOfFood = function _startCreatingOfFood() {
        var _this = this;
        _this.foodCreation = setInterval(function() {
            _this.food.push(new app.Meal({
                canvasWidth: _this.config.canvasWidth,
                canvasHeight: _this.config.canvasHeight,
                step: _this.config.stepDelay
            }));
        }, _this.config.appearDelay);
    };

    Game.prototype.stopGame = function _stopGame() {
        this.gameOver = true;

        document.body.classList.add(this.config.gameOverClass);

        clearInterval(this.foodCreation);

        this.food.forEach(function(meal) {
           meal.alive = false;
        });
    };

    app.Game = Game;

    return app.Game;

}).call(window.VGN = window.VGN || {});
'use strict';

(function() {
    var app = this;

    //Private method
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    var Meal = function _Meal(options) {
        var _this = this;

        this.alive = true;

        this.getType = function _getType() {
            return props.type;
        };

        this.getPosition = function _getPosition() {
            return {x: props.x, y: props.y};
        };

        this.setPosition = function _setPosition(x, y) {
            props.x = x;
            props.y = y;

            return this.getPosition();
        };

        this.getCanvasSize = function _getCanvasSize() {
            return {height: props.canvasHeight, width: props.canvasWidth};
        };

        //Private properties
        var options = options || {};
        var props = {
            canvasWidth: options.canvasWidth,
            canvasHeight: options.canvasHeight,
            step: options.step,
            type: this.pickType()
        };

        var startPos = this.setStartPosition();

        this.setPosition(startPos.x, startPos.y);

        this.directon = ((props.x === props.canvasWidth || props.y === props.canvasHeight) ? '-' : '+') +  (((props.x === props.canvasWidth || props.x === props.canvasHeight)) ? 'x' : 'y');

        this.counter = setInterval(function() {
            _this.go();
        }, props.step);
    };

    Meal.prototype.checkPosition = function() {
        var position = this.getPosition();
        var canvas = this.getCanvasSize();

        return ((position.x < canvas.width && position.x > 0) && (position.y < canvas.height && position.y > 0));
    };

    Meal.prototype.go = function _go() {
        var position = this.getPosition();

        switch(this.directon) {
            case '-x':
                this.setPosition(position.x - 1, position.y); break;
            case '+x':
                this.setPosition(position.x + 1, position.y); break;
            case '-y':
                this.setPosition(position.x, position.y - 1); break;
            case '+y':
                this.setPosition(position.x, position.y + 1); break;
        }

        if(!this.checkPosition()) {
            this.destroy();
        }

        return this;
    };

    Meal.prototype.destroy = function _destroy() {
        clearInterval(this.counter);

        this.alive = false;
    };

    Meal.prototype.setStartPosition = function _setStartPosition() {
        var x,
            y,
            canvas = this.getCanvasSize(),
            side = getRandomInt(1,4);

        switch (side) {
            case 1:
                y = canvas.height; x = getRandomInt(1, canvas.width - 1); break;
            case 2:
                x = canvas.width; y = getRandomInt(1, canvas.height - 1); break;
            case 3:
                y = 0; x = getRandomInt(1, canvas.width - 1); break;
            case 4:
                x = 0; y = getRandomInt(1, canvas.height - 1); break;
        }

        return {x: x, y: y};
    };

    Meal.prototype.pickType = function _pickType() {
        if(getRandomInt(0, 1)) {
            return 'meat';
        }

        return 'vegetable';
    };


    app.Meal = Meal;

    return app.Meal;
}).call(window.VGN = window.VGN || {});
'use strict';

(function() {
    var app = this;
    var instance;

    var Player = function _Player(options) {
        if(instance !== undefined) {
            return instance;
        }

        instance = this;

        //Private properties
        var props = {
            x: 0,
            y: 0,
            canvasHeight: options.canvasHeight,
            canvasWidth: options.canvasWidth,
            playerName: options.playerName || 'Player'
        };

        //Set starting position
        props.x = Math.round(props.canvasWidth / 2);
        props.y = Math.round(props.canvasHeight / 2);

        //Methods which depends on private properties
        this.getPosition = function _getPosition() {
            return {x: props.x, y: props.y};
        };

        this.getCanvasSize = function _getCnvasSize() {
            return {width: props.canvasWidth, height: props.canvasHeight};
        };

        this.setPosition = function _setPosition(x, y) {
            if(!this.checkPosition(x, y)) {
                return false;
            }

            props.x = x;
            props.y = y;

            return this.getPosition();
        };

        this.score = 0;

        this.listenEvents();
    };

    Player.prototype.checkPosition = function _checkPosition(x, y) {
        var canvasSize = this.getCanvasSize();

        if ((x < 0) || (x > canvasSize.width) || (y < 0) || (y > canvasSize.height)) {
            return false;
        }
        return true;
    };

    Player.prototype.go = function _go(direction) {
        var position = this.getPosition();

        switch(direction) {
            case 'up':
                return this.setPosition(position.x, position.y - 1); break;
            case 'right':
                return this.setPosition(position.x + 1, position.y); break;
            case 'down':
                return this.setPosition(position.x, position.y + 1); break;
            case 'left':
                return this.setPosition(position.x - 1, position.y); break;
            default:
                return false;
        }
    };

    Player.prototype.listenEvents = function _listenEvents() {
        var _this = this;
        var currentPos = _this.getPosition();

        app.subscribe('go:up', function() {
            _this.go('up');
        });

        app.subscribe('go:right', function() {
            _this.go('right');
        });

        app.subscribe('go:down', function() {
            _this.go('down');
        });

        app.subscribe('go:left', function() {
            _this.go('left');
        });

        app.subscribe('eat', function() {
           _this.score += 100;
        });
    };

    app.Player = Player;

    return app.Player;
}).call(window.VGN = window.VGN || {});
//window.game = new window.VGN.Game();
//
//setInterval(function() {
//    var canvas = game.getCanvasSize();
//    var player = game.player.getPosition();
//    var food = game.food;
//
//    var html = '<h1>The Game</h1>' +
//        '<p> Canvas size: ' + canvas.width + ' x ' + canvas.height + ' </p>' +
//        '<h2>Player</h2>' +
//        '<p> Position: X = ' + player.x + '; Y = ' + player.y + ' </p>';
//
//    for(var i = 0; i < food.length; i++) {
//        var type =  food[i].getType();
//        var pos = food[i].getPosition();
//        html += '<h3>Meal</h3><p>Type:' + type + '<br>Position: X = ' + pos.x + '; Y = ' + pos.y + '</p>'
//    }
//    document.body.innerHTML = html;
//}, 10);
'use strict';

(function() {
    var app = this;

    //Private properties
    var config = {
        canvasId: 'gameCanvas',
        playerColor: 'rgb(0, 0, 0)',
        meatColor: 'rgb(255, 0, 0)',
        vegetablesColor: 'rgb(0, 255, 0)'
    };

    var Canvas = function Canvas() {
        this.canvas = document.getElementById(config.canvasId);
        this.ctx = this.canvas.getContext('2d');
        this.canvasWidthPx = this.canvas.width;
        this.canvasHeightPx = this.canvas.height;
        this.canvasWidth = 15;
        this.canvasHeight = 15;

        this.widthK = this.canvasWidthPx / this.canvasWidth;
        this.heightK = this.canvasHeightPx / this.canvasHeight;

        this.initialize();
    };

    Canvas.prototype.initialize = function _initialize() {
        this.game = new app.Game({
            canvasWidth: this.canvasWidth,
            canvasHeight: this.canvasHeight
        });

        this.animation(this.render, this);
    };

    Canvas.prototype.render = function _render() {
        var _this = this;
        _this.ctx.clearRect(0, 0, this.canvasWidthPx, this.canvasHeightPx);

        var playerPos = this.game.player.getPosition();
        _this.ctx.fillStyle = config.playerColor;
        _this.ctx.fillRect(playerPos.x * _this.widthK, playerPos.y * _this.heightK, _this.widthK, _this.heightK);


        this.game.food.forEach(function(meal) {
            if(!meal.alive) {
                return;
            }

            if(meal.getType() === 'vegetable') {
                _this.ctx.fillStyle = config.vegetablesColor;
            }
            else {
                _this.ctx.fillStyle = config.meatColor;
            }

            var pos = meal.getPosition();
            _this.ctx.fillRect(pos.x * _this.widthK, pos.y * _this.heightK, _this.widthK, _this.heightK);
        });
    };

    Canvas.prototype.animation = function _animation(callback, context) {
        var context = context || this;

        return requestAnimationFrame(function measure() {
            if(typeof callback === 'function') callback.call(context);
            requestAnimationFrame(measure);
        });
    };

    app.Canvas = Canvas;

    return Canvas.Canvas;
}).call(window.VGN = window.VGN || {});